[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 wav authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Falbel. Author, maintainer, copyright holder. Posit, PBC. Copyright holder. David Reid. Copyright holder.            vendored dr_wav.h code.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Falbel D (2022). wav: Package (One Line, Title Case). R package version 0.0.0.9000.","code":"@Manual{,   title = {wav: What the Package Does (One Line, Title Case)},   author = {Daniel Falbel},   year = {2022},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"wav","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"goal wav …","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version wav GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"mlverse/wav\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"What the Package Does (One Line, Title Case)","text":"basic example shows solve common problem:","code":"library(wav) ## basic example code"},{"path":"/reference/read_wav.html","id":null,"dir":"Reference","previous_headings":"","what":"Read/write wav files — read_wav","title":"Read/write wav files — read_wav","text":"Efficiently read write WAV files.","code":""},{"path":"/reference/read_wav.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read/write wav files — read_wav","text":"","code":"read_wav(path)  write_wav(x, path, sample_rate = 44100, bit_depth = 32)"},{"path":"/reference/read_wav.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read/write wav files — read_wav","text":"path Path file read written . x Numeric matrix dimensions [n_channels, n_samples]. Values matrix <double> range [-1, 1] integers range [-.Machine$integer.max, .Machine$integer.max] ie. 32 bits signed integers like R integers containing amplitudes. sample_rate Sample rate Hz associated samples. bit_depth Bit depth associated samples. affects precision data saved file.","code":""},{"path":"/reference/read_wav.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read/write wav files — read_wav","text":"reading: numeric matrix samples. also contains attributes sample_rate bit_depth. writing: boolean TRUE writing sucessful FALSE otherwise.","code":""},{"path":"/reference/read_wav.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Read/write wav files — read_wav","text":"write_wav(): Write wav file.","code":""},{"path":"/reference/read_wav.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read/write wav files — read_wav","text":"","code":"x <- matrix(sin(440 * seq(0, 2*pi, length = 44100)), nrow=1) tmp <- tempfile(fileext = \".wav\") write_wav(x, tmp) #> [1] TRUE y <- read_wav(tmp) all.equal(as.numeric(x), as.numeric(y), tolerance = 1e-7) #> [1] TRUE"}]
